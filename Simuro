#include "../header/stdafx.h"
#include "../header/platform.h"
#include "../header/adapter.h"
#include "../header/BaseRobot.h"
#include "../header/globalVariable.h"
#include<iostream>
#include "xstring"
#include<string>
#include<typeinfo>
#include<sstream>
#include<locale>
#include<vector>
using namespace Simuro;
using namespace Adapter;
using namespace std;

int tick = 0;
short tick_delay = 4;
extern int tickBeginPenalty = 0;
extern int tickBeginGoalKick = 0;
BaseRobot baseRobots[5];	// 我方机器人数组
BaseRobot oppRobots[5];		// 敌方机器人数组
DataLoader dataloader;
int race_state = -1;//处于何种定位球状态，0是开球，其他遵从JudgeType
int race_state_trigger = -1;//哪一方触发了定位球
double lastBallx = -110 + 37.5, lastBally = 0;
Vector2 BallPos[100000] = { {0,0} };
bool resetHistoryRecord = false;
bool newMatch = false;
void ConvertFieldToOtherSide(Field* field);

/**
* 打印比赛状态
*/
void OnEvent(EventType type, void* argument) {
	SendLog(L"V/Strategy:OnEvent()");
	if (type == EventType::MatchShootOutStart)
	{
		SendLog(L"Penalty Shootout Start");
	}
	else if (type == EventType::JudgeResult)
	{
		JudgeResultEvent* judgeResult = static_cast<JudgeResultEvent*>(argument);
		race_state = judgeResult->type;
		race_state_trigger = judgeResult->actor;
		if (judgeResult->type == JudgeType::PenaltyKick)	// 判断是否进入点球
		{
			SendLog(L"Penalty Kick");
		}
		switch (judgeResult->actor) {// 判断执行方（即进攻方）
		case Team::Self:
			SendLog(L"By self");
			break;
		case Team::Opponent:
			SendLog(L"By opp");
			break;
		case Team::None:
			SendLog(L"By both");
			break;
		}
	}
}

/**
* 获得队伍信息
*/
void GetTeamInfo(TeamInfo* teamInfo) {
	SendLog(L"V/Strategy:GetTeamInfo()");
	static const wchar_t teamName[] = L"Defense";	// 在此行修改双引号中的字符串为自己的队伍名
	static constexpr size_t len = sizeof(teamName);
	memcpy(teamInfo->teamName, teamName, len);
	newMatch = true;
}

/**
* 摆位信息，进行定位球摆位
*/
void GetPlacement(Field* field) {
	ConvertFieldToOtherSide(field);
	SendLog(L"V/Strategy:GetPlacement()");
	auto robots = field->selfRobots;
	resetHistoryRecord = true;
	if (race_state == JudgeType::PenaltyKick)//点球
	{
		tickBeginPenalty = field->tick;
		if (race_state_trigger == Team::Self)//点球进攻
		{
			robots[3].position.x = -10;// -10 30;
			robots[3].position.y = 50;//50 
			robots[3].rotation = -20;

			robots[2].position.x = -10;// 30;
			robots[2].position.y = -50;
			robots[2].rotation = 17;

			robots[0].position.x = -110 + 7;
			robots[0].position.y = 0;
			robots[0].rotation = 0;

			robots[1].position.x = 75;// 30;
			robots[1].position.y = 8;
			robots[1].rotation = -110;

			robots[4].position.x = -10;// 30;
			robots[4].position.y = -65;
			robots[4].rotation = 14;



		}
		else if (race_state_trigger == Team::Opponent)//点球防守
		{
			robots[0].position.x = -105;
			robots[0].position.y = 0;
			robots[0].rotation = 0;

			robots[1].position.x = 10;
			robots[1].position.y = 30;
			robots[1].rotation = 0;

			robots[2].position.x = 10;
			robots[2].position.y = -30;
			robots[2].rotation = -90;

			robots[3].position.x = 10;
			robots[3].position.y = 52;
			robots[3].rotation = -90;

			robots[4].position.x = 10;
			robots[4].position.y = -52;
			robots[4].rotation = -90;
		}
		else//None人触发
		{

		}
	}
	ConvertFieldToOtherSide(field);
}





// 策略行为主函数，可将以下函数用策略模式封装
void strategy_penalty(Field* field)
{
	double footBallNow_X = field->ball.position.x;
	double footBallNow_Y = field->ball.position.y;
	if (race_state == JudgeType::PenaltyKick)//点球
	{
		if (race_state_trigger == Team::Self)//点球进攻
		{
			SendLog(L"tick = " + to_wstring(tick));
			SendLog(L"tickBeginPenalty = " + to_wstring(tickBeginPenalty));
			for (int i = 0; i < 5; i++)
			{
				baseRobots[i].Velocity(0, 0);// 所有机器人置0，防止点球大战中移动犯规。
			}
			if (tick - tickBeginPenalty <= 10) {
				baseRobots[1].Velocity(100, 100);//baseRobots[1].moveTo(futureOpp0X, futureOpp0Y);// 对于点球机器人，直线冲撞。
				baseRobots[3].moveTo(-70, -50);
				baseRobots[2].Velocity(160, 160);
				baseRobots[4].Velocity(160, 160);
			}
			else if (tick - tickBeginPenalty <= 17)
			{
				baseRobots[1].Velocity(0, 0);//baseRobots[1].moveTo(futureOpp0X, futureOpp0Y);// 对于点球机器人，直线冲撞。
				baseRobots[3].moveTo(-70, -50);
				baseRobots[2].Velocity(160, 160);
				baseRobots[4].Velocity(160, 160);
			}
			else if (tick - tickBeginPenalty <= 20)
			{
				baseRobots[1].Velocity(0, 0);//baseRobots[1].moveTo(futureOpp0X, futureOpp0Y);// 对于点球机器人，直线冲撞。
				baseRobots[3].moveTo(-70, -50);
				baseRobots[2].Velocity(125, 125);
				baseRobots[4].Velocity(110, 125);
			}
			else if (tick - tickBeginPenalty <= 30) 
				{
					baseRobots[1].Velocity(125, -125);//baseRobots[1].moveTo(futureOpp0X, futureOpp0Y);// 对于点球机器人，直线冲撞。
					baseRobots[3].moveTo(-70, -50);
					baseRobots[2].Velocity(100, 125);
					baseRobots[4].Velocity(110, 125);
				}
				else if (tick - tickBeginPenalty <= 60) {
					baseRobots[1].Velocity(125, -125);//baseRobots[1].moveTo(futureOpp0X, futureOpp0Y);// 对于点球机器人，直线冲撞。
					baseRobots[3].throwBall(footBallNow_X, footBallNow_Y);
					baseRobots[2].throwBall(footBallNow_X, footBallNow_Y);
					baseRobots[4].throwBall(footBallNow_X, footBallNow_Y);
				}
				else {
					baseRobots[1].throwBall(footBallNow_X, footBallNow_Y);
					baseRobots[3].throwBall(footBallNow_X, footBallNow_Y);
				}

		}
		if (race_state_trigger == Team::Opponent)//点球防守
		{
			for (int i = 0; i < 5; i++)
			{
				baseRobots[i].Velocity(0, 0); // 所有机器人置0，防止点球大战中移动犯规。
			}
			double futureBallx = 4 * footBallNow_X - 3 * footBallNow_X;
			double futureBally = 4 * footBallNow_Y - 3 * footBallNow_Y;
			if ((footBallNow_Y) > -15 && (footBallNow_Y) < 15 )
				baseRobots[0].moveTo(108 , futureBally);	// 守门员预测球的位置，与球保持同一水平线
			else 
				baseRobots[0].moveTo(futureBallx, futureBally);
		}
	}
}

/**
* 获得策略信息
* 策略接口，相当于策略执行的主模块，可以不恰当地理解为main函数，是主要开发的部分
*/
void GetInstruction(Field* field) {
	// ConvertFieldToOtherSide(field);
	tick = field->tick;

	for (int i = 0; i < 5; i++) {
		baseRobots[i].update(&(field->selfRobots[i]), resetHistoryRecord);// 每一拍更新机器人信息给BaseRobot
		if (newMatch)
		{
			for (int j = 0; j <= 7; j++)
			{
				baseRobots[i].HistoryInformation[j] = field->selfRobots[i];	// 第0拍主动维护历史数据
				baseRobots[i].PredictInformation[j] = field->selfRobots[i];	// 第0拍主动维护预测数据
			}
			newMatch = false;
		}
		int tick_delay = 4;	// 平台延迟四拍
		baseRobots[i].PredictRobotInformation(tick_delay);	// 计算预测的信息 PredictInformation[]
	}

	double footBallNow_X = field->ball.position.x;
	double footBallNow_Y = field->ball.position.y;

	strategy_penalty(field);

	for (int i = 0; i < 5; i++)
	{
		baseRobots[i].saveLastInformation(footBallNow_X, footBallNow_Y);
	}
	dataloader.set_tick_state(tick, race_state);
	resetHistoryRecord = false;
}

/**
 * @brief 将作为传入的数据转换为另一方视角
 *
 * @param field 赛场数据
 */
void ConvertFieldToOtherSide(Field* field) {
	field->ball.position.x *= -1;
	field->ball.position.y *= -1;
	for (int i = 0; i < PLAYERS_PER_SIDE; i++)
	{

		field->opponentRobots[i].position.x *= -1;
		field->opponentRobots[i].position.y *= -1;
		field->opponentRobots[i].rotation = field->opponentRobots[i].rotation > 0 ? -180 + field->opponentRobots[i].rotation : 180 + field->opponentRobots[i].rotation;
		field->selfRobots[i].position.x *= -1;
		field->selfRobots[i].position.y *= -1;
		field->selfRobots[i].rotation = field->selfRobots[i].rotation > 0 ? -180 + field->selfRobots[i].rotation : 180 + field->selfRobots[i].rotation;
	}
}
